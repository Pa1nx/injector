







local NumberValue = 20
local TrueSubFalsePlus = true




-- Teleports From Lobby To Advanced Digsite

print("Developer : Leanguttzz")
print("Information : Activating Script…")
print("Information : Best Functioning")
wait(2)
workspace.Map:Destroy()
workspace:FindFirstChild("__THINGS").Pets:Destroy()
workspace:FindFirstChild("__THINGS").Breakables:Destroy()
workspace:FindFirstChild("__THINGS").Eggs:Destroy()
workspace:FindFirstChild("__THINGS").Ornaments:Destroy()
wait(5)

local player = game.Players.LocalPlayer
local character = player.Character
local TweenService = game:GetService("TweenService")

local targetPosition = workspace:FindFirstChild("__THINGS").Instances.AdvancedDigsite.Teleports.Enter.Position
local attempts = 5
local attemptsLeft = attempts

repeat
    local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
    if humanoidRootPart then
        local duration = (humanoidRootPart.Position - targetPosition).Magnitude / 999999
        local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)

        local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = CFrame.new(targetPosition)})
        tween:Play()
        tween.Completed:Wait()

        local currentPosition = humanoidRootPart.Position
        local distance = (currentPosition - targetPosition).Magnitude

        if distance <= 50 then  -- Adjust the radius as needed
            print("Information: Successfully reached target position.")
            break
        end
    else
        -- Character's HumanoidRootPart is missing, wait until it appears again
        character = player.Character or player.CharacterAdded:Wait()
    end

    wait(20) -- Wait for 10 seconds before checking again
    attemptsLeft = attemptsLeft - 1
until attemptsLeft <= 0

if attemptsLeft <= 0 then
    print("Information: Loading failed, please rejoin.")
    game.Players.LocalPlayer:Kick("Loading failed, please rejoin.")
end

local hierarchyPath

if workspace:FindFirstChild("__THINGS") and workspace:FindFirstChild("__THINGS"):FindFirstChild("__INSTANCE_CONTAINER") then
    repeat
        hierarchyPath = workspace:FindFirstChild("__THINGS"):FindFirstChild("__INSTANCE_CONTAINER")
        wait(0.1)
    until hierarchyPath

    if hierarchyPath:FindFirstChild("Active") then
        repeat
            hierarchyPath = hierarchyPath:FindFirstChild("Active")
            wait(0.1)
        until hierarchyPath

        if hierarchyPath:FindFirstChild("AdvancedDigsite") then
            repeat
                hierarchyPath = hierarchyPath:FindFirstChild("AdvancedDigsite")
                wait(0.1)
            until hierarchyPath

            if hierarchyPath:FindFirstChild("Important") then
                repeat
                    hierarchyPath = hierarchyPath:FindFirstChild("Important")
                    wait(0.1)
                until hierarchyPath

                if hierarchyPath:FindFirstChild("ActiveBlocks") then
                    repeat
                        hierarchyPath = hierarchyPath:FindFirstChild("ActiveBlocks")
                        wait(0.1)
                    until hierarchyPath

                    wait(0.1)
                else
                    print("Information: Loading...")
                end
            else
                print("Information: Loading...")
            end
        else
            print("Information: Loading...")
        end
    else
        print("Information: Loading...")
    end
else
    print("Information: Loading...")
end


local ReplicatedStorage = game:GetService("ReplicatedStorage")

function OrbCollect()
    while true do 
        local Orbs = workspace:FindFirstChild("__THINGS")
        if Orbs then
            for _, orb in ipairs(Orbs.Orbs:GetChildren()) do
                local ohTable1 = { tonumber(orb.Name) }
                ReplicatedStorage.Network["Orbs: Collect"]:FireServer(ohTable1)
                orb:Destroy()
            end 
        end
        task.wait()
    end
end

function LootbagCollect()
    while true do 
        local Lootbags = workspace:FindFirstChild("__THINGS") and workspace.__THINGS:FindFirstChild("Lootbags")
        if Lootbags then
            for _, bag in ipairs(Lootbags:GetChildren()) do
                local ohTable1 = { tostring(bag) }
                ReplicatedStorage.Network.Lootbags_Claim:FireServer(ohTable1)
                bag:Destroy()
            end 
        end
        task.wait()
    end
end

-- Start both functions in parallel
spawn(OrbCollect)
spawn(LootbagCollect)
print("__THINGS")



-- Script Farming Top Left

print("Information : Activating Farm…")
print("Information : Farming Top Corners ")
print("Information : 1 / 4 ")
wait(10)
local hierarchyPath

if workspace:FindFirstChild("__THINGS") and workspace:FindFirstChild("__THINGS"):FindFirstChild("__INSTANCE_CONTAINER") then
    repeat
        hierarchyPath = workspace:FindFirstChild("__THINGS"):FindFirstChild("__INSTANCE_CONTAINER")
        wait(0.1)
    until hierarchyPath

    if hierarchyPath:FindFirstChild("Active") then
        repeat
            hierarchyPath = hierarchyPath:FindFirstChild("Active")
            wait(0.1)
        until hierarchyPath

        if hierarchyPath:FindFirstChild("AdvancedDigsite") then
            repeat
                hierarchyPath = hierarchyPath:FindFirstChild("AdvancedDigsite")
                wait(0.1)
            until hierarchyPath

            if hierarchyPath:FindFirstChild("Important") then
                repeat
                    hierarchyPath = hierarchyPath:FindFirstChild("Important")
                    wait(0.1)
                until hierarchyPath

                if hierarchyPath:FindFirstChild("ActiveBlocks") then
                    repeat
                        hierarchyPath = hierarchyPath:FindFirstChild("ActiveBlocks")
                        wait(0.1)
                    until hierarchyPath

                    wait(0.1)
                else
                    print("Information: Loading...")
                end
            else
                print("Information: Loading...")
            end
        else
            print("Information: Loading...")
        end
    else
        print("Information: Loading...")
    end
else
    print("Information: Loading...")
end
local BV = Instance.new('BodyVelocity', game.Workspace)
BV.Parent = game.Players.LocalPlayer.Character.HumanoidRootPart
BV.velocity = Vector3.new(0, 0.1, 0)
BV.maxForce = Vector3.new(9e9, 9e9, 9e9)

task.wait(0.1)
local startTime = tick() 
while tick() - startTime < 20 do 
wait(0.01)
local TweenService = game:GetService("TweenService")

local player = game.Players.LocalPlayer
local character = player.Character
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local ActiveBlocksFolder = workspace:FindFirstChild("__THINGS"):FindFirstChild("__INSTANCE_CONTAINER").Active.AdvancedDigsite.Important.ActiveBlocks

local closestPart = nil
local closestDistance = math.huge
local correctedPosition = nil
for _, part in ipairs(ActiveBlocksFolder:GetChildren()) do
    if part:IsA("BasePart") then
        local position = part.Position
        correctedPosition = Vector3.new(math.floor(position.X + 0.5), math.floor(position.Y + 0.5), math.floor(position.Z + 0.5))

        if correctedPosition.X == 691 and correctedPosition.Z == -2741 then
            local distance = (humanoidRootPart.Position - position).Magnitude
            if distance < closestDistance then
                closestPart = part
                closestDistance = distance
            end
        end
    end
end

local targetPosition = closestPart.Position


local targetPositionOffset
if TrueSubFalsePlus == true then
    targetPositionOffset = Vector3.new(targetPosition.X, targetPosition.Y - NumberValue, targetPosition.Z)
else
    targetPositionOffset = Vector3.new(targetPosition.X, targetPosition.Y + NumberValue, targetPosition.Z)
end

local duration = (humanoidRootPart.Position - targetPositionOffset).Magnitude / 9999999
local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)

local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = CFrame.new(targetPositionOffset)})
tween:Play()
tween.Completed:Wait()

 local position = targetPosition
            local roundedPosition = Vector3.new(
                math.floor(position.X),
                math.floor(position.Y),
                math.floor(position.Z)
            )

            local originalPosition = Vector3.new(587, 50, -2757)
            local orientationNumbers = Vector3.new(1, 1, 1) 

            local xOffset = position.X - originalPosition.X
            local yOffset = position.Y - originalPosition.Y
            local zOffset = position.Z - originalPosition.Z

            local equivalentPosition = Vector3.new(
                orientationNumbers.X + math.floor(xOffset + 0.5) / 8,
                orientationNumbers.Y + math.floor(-yOffset + 0.5) / 7.6, -- Adjust Y-offset calculation
                orientationNumbers.Z + math.floor(zOffset + 0.5) / 8
            )

            local newX = math.floor(equivalentPosition.X)
            local newY = math.floor(equivalentPosition.Y)
            local newZ = math.floor(equivalentPosition.Z)

            local testinghere = Vector3.new(newX, newY, newZ)

for i = 1, 3 do
    wait(0.01)

    local args = {
        [1] = "AdvancedDigsite",
        [2] = "DigBlock",
        [3] = testinghere
    }

    game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(args))

    wait(0.01)

    local args = {
        [1] = "AdvancedDigsite",
        [2] = "DigBlock",
        [3] = testinghere + Vector3.new(0, 1, 0)
    }

    game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(args))

    wait(0.01)

    local args = {
        [1] = "AdvancedDigsite",
        [2] = "DigBlock",
        [3] = testinghere - Vector3.new(0, 1, 0)
    }

    game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(args))

    wait(0.01)

    local args = {
        [1] = "AdvancedDigsite",
        [2] = "DigBlock",
        [3] = testinghere - Vector3.new(0, 2, 0)
    }

    game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
end
end

print("Information : 2 / 4 ")

local startTime = tick() 
while tick() - startTime < 20 do 
wait(0.01)
local TweenService = game:GetService("TweenService")

local player = game.Players.LocalPlayer
local character = player.Character
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local ActiveBlocksFolder = workspace:FindFirstChild("__THINGS"):FindFirstChild("__INSTANCE_CONTAINER").Active.AdvancedDigsite.Important.ActiveBlocks

local closestPart = nil
local closestDistance = math.huge
local correctedPosition = nil
for _, part in ipairs(ActiveBlocksFolder:GetChildren()) do
    if part:IsA("BasePart") then
        local position = part.Position
        correctedPosition = Vector3.new(math.floor(position.X + 0.5), math.floor(position.Y + 0.5), math.floor(position.Z + 0.5))

        if correctedPosition.X == 691 and correctedPosition.Z == -2741 then
            local distance = (humanoidRootPart.Position - position).Magnitude
            if distance < closestDistance then
                closestPart = part
                closestDistance = distance
            end
        end
    end
end

local targetPosition = closestPart.Position

if TrueSubFalsePlus == true then
    targetPositionOffset = Vector3.new(targetPosition.X, targetPosition.Y - NumberValue, targetPosition.Z)
else
    targetPositionOffset = Vector3.new(targetPosition.X, targetPosition.Y + NumberValue, targetPosition.Z)
end

local duration = (humanoidRootPart.Position - targetPositionOffset).Magnitude / 9999999
local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)

local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = CFrame.new(targetPositionOffset)})
tween:Play()
tween.Completed:Wait()

 local position = targetPosition
            local roundedPosition = Vector3.new(
                math.floor(position.X),
                math.floor(position.Y),
                math.floor(position.Z)
            )

            local originalPosition = Vector3.new(587, 50, -2757)
            local orientationNumbers = Vector3.new(1, 1, 1) 

            local xOffset = position.X - originalPosition.X
            local yOffset = position.Y - originalPosition.Y
            local zOffset = position.Z - originalPosition.Z

            local equivalentPosition = Vector3.new(
                orientationNumbers.X + math.floor(xOffset + 0.5) / 8,
                orientationNumbers.Y + math.floor(-yOffset + 0.5) / 7.6, -- Adjust Y-offset calculation
                orientationNumbers.Z + math.floor(zOffset + 0.5) / 8
            )

            local newX = math.floor(equivalentPosition.X)
            local newY = math.floor(equivalentPosition.Y)
            local newZ = math.floor(equivalentPosition.Z)

            local testinghere = Vector3.new(newX, newY, newZ)

for i = 1, 3 do
    wait(0.01)

    local args = {
        [1] = "AdvancedDigsite",
        [2] = "DigBlock",
        [3] = testinghere
    }

    game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(args))

    wait(0.01)

    local args = {
        [1] = "AdvancedDigsite",
        [2] = "DigBlock",
        [3] = testinghere + Vector3.new(0, 1, 0)
    }

    game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(args))

    wait(0.01)

    local args = {
        [1] = "AdvancedDigsite",
        [2] = "DigBlock",
        [3] = testinghere - Vector3.new(0, 1, 0)
    }

    game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(args))

    wait(0.01)

    local args = {
        [1] = "AdvancedDigsite",
        [2] = "DigBlock",
        [3] = testinghere - Vector3.new(0, 2, 0)
    }

    game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
end
end



print("Information : 3 / 4 ")



local startTime = tick() 
while tick() - startTime < 20 do 
wait(0.01)
local TweenService = game:GetService("TweenService")

local player = game.Players.LocalPlayer
local character = player.Character
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local ActiveBlocksFolder = workspace:FindFirstChild("__THINGS"):FindFirstChild("__INSTANCE_CONTAINER").Active.AdvancedDigsite.Important.ActiveBlocks

local closestPart = nil
local closestDistance = math.huge
local correctedPosition = nil
for _, part in ipairs(ActiveBlocksFolder:GetChildren()) do
    if part:IsA("BasePart") then
        local position = part.Position
        correctedPosition = Vector3.new(math.floor(position.X + 0.5), math.floor(position.Y + 0.5), math.floor(position.Z + 0.5))

        if correctedPosition.X == 603 and correctedPosition.Z == -2653 then
            local distance = (humanoidRootPart.Position - position).Magnitude
            if distance < closestDistance then
                closestPart = part
                closestDistance = distance
            end
        end
    end
end

local targetPosition = closestPart.Position

if TrueSubFalsePlus == true then
    targetPositionOffset = Vector3.new(targetPosition.X, targetPosition.Y - NumberValue, targetPosition.Z)
else
    targetPositionOffset = Vector3.new(targetPosition.X, targetPosition.Y + NumberValue, targetPosition.Z)
end

local duration = (humanoidRootPart.Position - targetPositionOffset).Magnitude / 9999999
local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)

local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = CFrame.new(targetPositionOffset)})
tween:Play()
tween.Completed:Wait()

 local position = targetPosition
            local roundedPosition = Vector3.new(
                math.floor(position.X),
                math.floor(position.Y),
                math.floor(position.Z)
            )

            local originalPosition = Vector3.new(587, 50, -2757)
            local orientationNumbers = Vector3.new(1, 1, 1) 

            local xOffset = position.X - originalPosition.X
            local yOffset = position.Y - originalPosition.Y
            local zOffset = position.Z - originalPosition.Z

            local equivalentPosition = Vector3.new(
                orientationNumbers.X + math.floor(xOffset + 0.5) / 8,
                orientationNumbers.Y + math.floor(-yOffset + 0.5) / 7.6, -- Adjust Y-offset calculation
                orientationNumbers.Z + math.floor(zOffset + 0.5) / 8
            )

            local newX = math.floor(equivalentPosition.X)
            local newY = math.floor(equivalentPosition.Y)
            local newZ = math.floor(equivalentPosition.Z)

            local testinghere = Vector3.new(newX, newY, newZ)

for i = 1, 3 do
    wait(0.01)

    local args = {
        [1] = "AdvancedDigsite",
        [2] = "DigBlock",
        [3] = testinghere
    }

    game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(args))

    wait(0.01)

    local args = {
        [1] = "AdvancedDigsite",
        [2] = "DigBlock",
        [3] = testinghere + Vector3.new(0, 1, 0)
    }

    game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(args))

    wait(0.01)

    local args = {
        [1] = "AdvancedDigsite",
        [2] = "DigBlock",
        [3] = testinghere - Vector3.new(0, 1, 0)
    }

    game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(args))

    wait(0.01)

    local args = {
        [1] = "AdvancedDigsite",
        [2] = "DigBlock",
        [3] = testinghere - Vector3.new(0, 2, 0)
    }

    game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
end
end



print("Information : 4 / 4 ")



local startTime = tick() 
while tick() - startTime < 20 do 
wait(0.01)
local TweenService = game:GetService("TweenService")

local player = game.Players.LocalPlayer
local character = player.Character
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local ActiveBlocksFolder = workspace:FindFirstChild("__THINGS"):FindFirstChild("__INSTANCE_CONTAINER").Active.AdvancedDigsite.Important.ActiveBlocks

local closestPart = nil
local closestDistance = math.huge
local correctedPosition = nil
for _, part in ipairs(ActiveBlocksFolder:GetChildren()) do
    if part:IsA("BasePart") then
        local position = part.Position
        correctedPosition = Vector3.new(math.floor(position.X + 0.5), math.floor(position.Y + 0.5), math.floor(position.Z + 0.5))

        if correctedPosition.X == 603 and correctedPosition.Z == -2741 then
            local distance = (humanoidRootPart.Position - position).Magnitude
            if distance < closestDistance then
                closestPart = part
                closestDistance = distance
            end
        end
    end
end

local targetPosition = closestPart.Position

if TrueSubFalsePlus == true then
    targetPositionOffset = Vector3.new(targetPosition.X, targetPosition.Y - NumberValue, targetPosition.Z)
else
    targetPositionOffset = Vector3.new(targetPosition.X, targetPosition.Y + NumberValue, targetPosition.Z)
end

local duration = (humanoidRootPart.Position - targetPositionOffset).Magnitude / 9999999
local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)

local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = CFrame.new(targetPositionOffset)})
tween:Play()
tween.Completed:Wait()

 local position = targetPosition
            local roundedPosition = Vector3.new(
                math.floor(position.X),
                math.floor(position.Y),
                math.floor(position.Z)
            )

            local originalPosition = Vector3.new(587, 50, -2757)
            local orientationNumbers = Vector3.new(1, 1, 1) 

            local xOffset = position.X - originalPosition.X
            local yOffset = position.Y - originalPosition.Y
            local zOffset = position.Z - originalPosition.Z

            local equivalentPosition = Vector3.new(
                orientationNumbers.X + math.floor(xOffset + 0.5) / 8,
                orientationNumbers.Y + math.floor(-yOffset + 0.5) / 7.6, 
                orientationNumbers.Z + math.floor(zOffset + 0.5) / 8
            )

            local newX = math.floor(equivalentPosition.X)
            local newY = math.floor(equivalentPosition.Y)
            local newZ = math.floor(equivalentPosition.Z)

            local testinghere = Vector3.new(newX, newY, newZ)

for i = 1, 3 do
    wait(0.01)

    local args = {
        [1] = "AdvancedDigsite",
        [2] = "DigBlock",
        [3] = testinghere
    }

    game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(args))

    wait(0.01)

    local args = {
        [1] = "AdvancedDigsite",
        [2] = "DigBlock",
        [3] = testinghere + Vector3.new(0, 1, 0)
    }

    game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(args))

    wait(0.01)

    local args = {
        [1] = "AdvancedDigsite",
        [2] = "DigBlock",
        [3] = testinghere - Vector3.new(0, 1, 0)
    }

    game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(args))

    wait(0.01)

    local args = {
        [1] = "AdvancedDigsite",
        [2] = "DigBlock",
        [3] = testinghere - Vector3.new(0, 2, 0)
    }

    game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
end
end






while true do
    wait(0.01)
    local player = game.Players.LocalPlayer
    local character = player.Character
    local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")

    local TweenService = game:GetService("TweenService")
    local targetColor = Color3.fromRGB(98, 37, 209)
    local hierarchyPath = workspace:FindFirstChild("__THINGS"):FindFirstChild("__INSTANCE_CONTAINER").Active.AdvancedDigsite.Important.ActiveBlocks

    if hierarchyPath then
        local found = false
        local targetPosition = nil
local correctedPosition

        for _, part in ipairs(hierarchyPath:GetChildren()) do
            if part:IsA("BasePart") and part.Color == targetColor then
                targetPosition = part.Position
correctedPosition = Vector3.new(math.floor(targetPosition.X + 0.5), math.floor(targetPosition.Y + 0.5), math.floor(targetPosition.Z + 0.5))

                
                found = true
                break  -- Break out of this loop when a part with the target color is found
            end
        end

        if found then
            -- Calculate target position offset (10 feet above the part's position)
            local targetPositionOffset = targetPosition

            -- Create tween information
            local duration = (humanoidRootPart.Position - targetPositionOffset).Magnitude / 9999999
            local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)

if TrueSubFalsePlus == true then
    targetPositionOffset = Vector3.new(targetPosition.X, targetPosition.Y - NumberValue, targetPosition.Z)
else
    targetPositionOffset = Vector3.new(targetPosition.X, targetPosition.Y + NumberValue, targetPosition.Z)
end
            -- Create and play the tween
            local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = CFrame.new(targetPositionOffset)})
            tween:Play()
            tween.Completed:Wait()

            if humanoidRootPart then
                local position = correctedPosition
                local roundedPosition = Vector3.new(
                    math.floor(position.X),
                    math.floor(position.Y),
                    math.floor(position.Z)
                )

                local originalPosition = Vector3.new(587, 50, -2757)
                local orientationNumbers = Vector3.new(1, 1, 1) 

                local xOffset = position.X - originalPosition.X
                local yOffset = position.Y - originalPosition.Y
                local zOffset = position.Z - originalPosition.Z

                local equivalentPosition = Vector3.new(
                    orientationNumbers.X + math.floor(xOffset + 0.5) / 8,
                    orientationNumbers.Y + math.floor(-yOffset + 0.5) / 8, 
                    orientationNumbers.Z + math.floor(zOffset + 0.5) / 8
                )

                local newX = math.floor(equivalentPosition.X)
                local newY = math.floor(equivalentPosition.Y)
                local newZ = math.floor(equivalentPosition.Z)

                local testinghere = Vector3.new(newX, newY, newZ)

                for i = 1, 3 do
wait(0.02)
                    local args = {
                        [1] = "AdvancedDigsite",
                        [2] = "DigBlock",
                        [3] = testinghere
                    }

                    game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
                end
            end
        else
task.wait(1)
          local Http = game:GetService("HttpService")
local TPS = game:GetService("TeleportService")
local Api = "https://games.roblox.com/v1/games/"

local _place = game.PlaceId
local _servers = Api.._place.."/servers/Public?sortOrder=Asc&limit=100"
function ListServers(cursor)
   local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
   return Http:JSONDecode(Raw)
end

local Server, Next; repeat
   local Servers = ListServers(Next)
   Server = Servers.data[1]
   Next = Servers.nextPageCursor
until Server

TPS:TeleportToPlaceInstance(_place,Server.id,game.Players.LocalPlayer)
task.wait(10)
end
    else
        print("ActiveBlocks folder not found.")
    end
end
