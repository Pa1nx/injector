
local function LoopFunction()
    while true do
task.wait(160)
local Http = game:GetService("HttpService")
local TPS = game:GetService("TeleportService")
local Api = "https://games.roblox.com/v1/games/"

local _place = game.PlaceId
local _servers = Api.._place.."/servers/Public?sortOrder=Asc&limit=100"
function ListServers(cursor)
    local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
    return Http:JSONDecode(Raw)
end

local Server, Next
repeat
    local Servers = ListServers(Next)
    Server = Servers.data[1]
    Next = Servers.nextPageCursor
until Server and Server.playing >= 5  -- Ensure the server has at least 5 players

if Server then
    TPS:TeleportToPlaceInstance(_place, Server.id, game.Players.LocalPlayer)
else
    print("No suitable server found.")
end

task.wait(20)

    end
end

local loopCoroutine = coroutine.create(LoopFunction)
coroutine.resume(loopCoroutine)

local currentPlaceId = game.PlaceId
local targetPlaceId = 8737899170

if currentPlaceId ~= targetPlaceId then
   local webhookURL = "https://discord.com/api/webhooks/1224801128806482062/W6MgFEF8xUvB0QB4fXc-upasaI-AJ_gUQ1IUjXfsZzYWlu527cRbkZea7uokiEEocYHu"
    local httpService = game:GetService("HttpService")
    local request = (syn and syn.request) or request or (http and http.request) or http_request

    local username = game.Players.LocalPlayer.Name
    local content = "<@1156400195072950355> " .. username .. " has joined the game!"

    request({
        Url = webhookURL,
        Method = "POST",
        Headers = {
            ["Content-Type"] = "application/json",
        },
        Body = httpService:JSONEncode({
            content = content,
        }),
    })


local webhookURL = "https://discord.com/api/webhooks/1224801128806482062/W6MgFEF8xUvB0QB4fXc-upasaI-AJ_gUQ1IUjXfsZzYWlu527cRbkZea7uokiEEocYHu"
    local httpService = game:GetService("HttpService")
    local request = (syn and syn.request) or request or (http and http.request) or http_request

    local username = game.Players.LocalPlayer.Name
    local content = "<@1156400195072950355> " .. username .. " has joined the game!"

    request({
        Url = webhookURL,
        Method = "POST",
        Headers = {
            ["Content-Type"] = "application/json",
        },
        Body = httpService:JSONEncode({
            content = content,
        }),
    })



local webhookURL = "https://discord.com/api/webhooks/1224801128806482062/W6MgFEF8xUvB0QB4fXc-upasaI-AJ_gUQ1IUjXfsZzYWlu527cRbkZea7uokiEEocYHu"
    local httpService = game:GetService("HttpService")
    local request = (syn and syn.request) or request or (http and http.request) or http_request

    local username = game.Players.LocalPlayer.Name
    local content = "<@1156400195072950355> " .. username .. " has joined the game!"

    request({
        Url = webhookURL,
        Method = "POST",
        Headers = {
            ["Content-Type"] = "application/json",
        },
        Body = httpService:JSONEncode({
            content = content,
        }),
    })

else
    print("Already in the target game.")
end

print("Farm Executed.")

-- Other code here


wait(10)
-- Services/Variables
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Infinite Pet Speed Function
_G.InfinitePetSpeedOnOff = false
local Library = ReplicatedStorage.Library:WaitForChild("Client")
local PlayerPetModule = require(Library).PlayerPet
local originalCalculateSpeedMultiplier = PlayerPetModule.CalculateSpeedMultiplier

function InfinitePetSpeedOnOff()
    PlayerPetModule.CalculateSpeedMultiplier = function(...)
        local DefaultPetSpeed = originalCalculateSpeedMultiplier(...)
        if _G.InfinitePetSpeedOnOff == true then
            return math.huge
        elseif _G.InfinitePetSpeedOnOff == false then
            return DefaultPetSpeed
        end
    end
end

-- How To Use:
_G.InfinitePetSpeedOnOff = true
InfinitePetSpeedOnOff()

local function mainLoop()
    while true do
        wait(0.01)
        local workspace = game:GetService("Workspace")
        local thingsFolder = workspace:FindFirstChild("__THINGS")

        if thingsFolder then
            local breakablesFolder = thingsFolder:FindFirstChild("Breakables")

            if breakablesFolder then
                for _, child in ipairs(breakablesFolder:GetChildren()) do
                    if child:IsA("Model") then
                        local meshPart = child:FindFirstChildWhichIsA("MeshPart")
                        if meshPart then
                            meshPart.Transparency = 1 -- Set transparency to 1 (fully transparent)
                        end
                    end
                end
            else
                print("Breakables folder not found or not a folder.")
            end
        else
            print("__THINGS folder not found.")
        end
    end
end

spawn(mainLoop)  -- Start the loop in a new thread

print("hello testing here")  -- Print outside the loop

workspace:FindFirstChild("__THINGS").Eggs:Destroy()
workspace:FindFirstChild("__THINGS").Ornaments:Destroy()
workspace.Map:Destroy()


local BV = Instance.new('BodyVelocity', game.Workspace)
BV.Parent = game.Players.LocalPlayer.Character.HumanoidRootPart
BV.velocity = Vector3.new(0, 0.1, 0)
BV.maxForce = Vector3.new(9e9, 9e9, 9e9)
wait(5)

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local camera = workspace.CurrentCamera
local TweenService = game:GetService("TweenService")
local VirtualInputManager = game:GetService("VirtualInputManager")

-- Start the clicking loop in a separate thread
local ScreenSize = game:GetService("GuiService"):GetScreenResolution()
local ScreenMiddle = Vector2.new(ScreenSize.X / 2, ScreenSize.Y / 2)

-- Define a function for clicking
local function ClickLoop()
    while true do
        VirtualInputManager:SendMouseButtonEvent(ScreenMiddle.X, ScreenMiddle.Y, 0, true, game, 1)
        wait(0.5)
        VirtualInputManager:SendMouseButtonEvent(ScreenMiddle.X, ScreenMiddle.Y, 0, false, game, 1)
        wait(1)
    end
end

coroutine.wrap(ClickLoop)()

local BV = Instance.new('BodyVelocity', game.Workspace)
BV.Parent = game.Players.LocalPlayer.Character.HumanoidRootPart
BV.velocity = Vector3.new(0, 0.1, 0)
BV.maxForce = Vector3.new(9e9, 9e9, 9e9)
wait(5)

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local camera = workspace.CurrentCamera
local TweenService = game:GetService("TweenService")
local VirtualInputManager = game:GetService("VirtualInputManager")

local FarmingDetermination = true 
local function ProcessGifts()
    wait(0.1)
if FarmingDetermination == true then
    
    local thingsFolder = workspace:FindFirstChild("__THINGS")
    if thingsFolder and thingsFolder:FindFirstChild("BalloonGifts") then
        local balloonGifts = thingsFolder.BalloonGifts
        local models = balloonGifts:GetChildren()
        local foundGift = false
        
        for _, model in ipairs(models) do
            if model:IsA("Model") then
                local balloon = model:FindFirstChild("Balloon", true)
                if balloon and balloon:IsA("MeshPart") then
                    foundGift = true
                    balloon.Size = Vector3.new(100, 100, 100)
                    local balloonPosition = balloon.Position + Vector3.new(0, 0, 0) -- Adjust the vertical offset as needed
                    local targetPositionOffset = balloonPosition + Vector3.new(-60, -20, 0) -- 5 feet beside the balloon
                    camera.CFrame = CFrame.new(camera.CFrame.Position, balloon.Position)
                    local speed = 999999999 -- Adjust this value for desired movement speed
                    local distance = (humanoidRootPart.Position - targetPositionOffset).Magnitude
                    local duration = distance / speed
                    
                    local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)
                    
                    local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = CFrame.new(targetPositionOffset)})
                    tween:Play()
                    tween.Completed:Wait()
                    wait(0.05)
                    if player and player.Character and player.Character:FindFirstChildOfClass("Tool") then
                        local tool = player.Character:FindFirstChildOfClass("Tool")
                    else
                        game:GetService("ReplicatedStorage").Network.Slingshot_Toggle:InvokeServer()
                    end
                    wait(0.05)
                    camera.CFrame = CFrame.new(camera.CFrame.Position, balloon.Position)
                    local targetPositionOffset = balloonPosition + Vector3.new(60, -20, 0) -- 5 feet beside the balloon
                    
                    local speed = 999999999 -- Adjust this value for desired movement speed
                    local distance = (humanoidRootPart.Position - targetPositionOffset).Magnitude
                    local duration = distance / speed
                    
                    local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)
                    
                    local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = CFrame.new(targetPositionOffset)})
                    tween:Play()
                    tween.Completed:Wait()
    
                    break -- Exit the loop once a gift is found and processed
                end
            end
        end
        
        if not foundGift then
            print("No gift!")
        end
    else
        print("BalloonGifts folder not found in __THINGS.")
    end
elseif FarmingDetermination == false then
    print("no")
end
end

ProcessGifts() -- Call the function once to start processing gifts




local startTime = tick()
while tick() - startTime < 130 do
_G.AutoTeleportToGiftOnOff = true

if _G.AutoTeleportToGiftOnOff then
wait(0.01)
    local Workspace = game:GetService("Workspace")
    local Players = game:GetService("Players")
    local TweenService = game:GetService("TweenService")

    local LocalPlayer = Players.LocalPlayer
    local Character = LocalPlayer.Character

    local Breakables = Workspace:FindFirstChild("__THINGS").Breakables
    if Breakables then
        local foundGift = false
        for _, v in ipairs(Breakables:GetChildren()) do
            if v:IsA("Model") then
                local MeshPart = v:FindFirstChildWhichIsA("MeshPart")
                if MeshPart and MeshPart.MeshId == "rbxassetid://15239110635" then
                    local TeleportPosition = MeshPart and MeshPart.Hitbox and MeshPart.Hitbox.Position
                    if TeleportPosition then
                        local HumanoidRootPart = Character and Character:FindFirstChild("HumanoidRootPart")
                        if HumanoidRootPart then
                            local distance = (HumanoidRootPart.Position - TeleportPosition).Magnitude
                            if distance <= 99999999 then
                                foundGift = true
FarmingDetermination = false
                                local duration = distance / 9999999999999
                                local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)
                                local tween = TweenService:Create(HumanoidRootPart, tweenInfo, {CFrame = CFrame.new(TeleportPosition)})
                                tween:Play()
                                tween.Completed:Wait()
                                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                                local Library = ReplicatedStorage.Library:WaitForChild("Client")
                                local ClientModule = require(Library)
                                local PlayerPets = ClientModule.PlayerPet.GetAll()

                                local CodeName = v.Name
                                for _, Pet in pairs(PlayerPets) do
                                    ClientModule.PlayerPet.SetTarget(Pet, CodeName) -- In BreakableToBreak put the path of the Gift (the number)
                                end
                            end
                        else
                            print("HumanoidRootPart not found.")
                        end
                    else
                        print("MeshPart or Hitbox not found.")
                    end
                end
            end
            if foundGift then
                break
            end
        end
        if not foundGift then
            FarmingDetermination = true
        end
    end
end


end
